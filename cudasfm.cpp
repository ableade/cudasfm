#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <set>
#include <fstream>
#include <utility>
//#include <pcl/point_cloud.h>
//#include <pcl/kdtree/kdtree_flann.h>
#include "shomatcher.hpp"
#include "shotracking.h"
#include "reconstructor.h"
#include <gflags/gflags.h>

using std::pair;
using std::cout;
using std::vector;
using std::endl;
using std::string;

DEFINE_bool(resize, false, "Choose whether to resize images before feature extraction");
DEFINE_string(images_directory, "", "The directory where the image files reside");
DEFINE_string(calibration_file, "", "Calibration file to use for the camera. Must be generated by open cv");
DEFINE_int32(max_image_size, 700, "If resizing, this is the max width to use for resizing");
DEFINE_string(feature_type, "ORB", "Feature detection algorithm to use. Choose from SIFT, SURF, ORB");



int main(int argc, char *argv[])
{
    string solverFlags = "-logtostderr";
    google::InitGoogleLogging(solverFlags.c_str());
#if 1
    string cameraCalibrationFile;
    if (argc < 2)
    {
        cout << "Program usage: <flight session directory> optional -- <camera calibration file>" << endl;
        exit(1);
    }
    FlightSession flight;
    (argc > 2) ? flight = FlightSession(argv[1], argv[2]) : flight = FlightSession(argv[1]);
    ShoMatcher shoMatcher(flight);

    //**** Begin Matching Pipeline ******
    if (argc > 3) {
        //A candidate file was provided 
        const auto candidateFile = argv[3];
        cout << "Using candidate file " << candidateFile << std::endl;
        shoMatcher.getCandidateMatchesFromFile(candidateFile);
    }
    else {
        double range = 0.000359;
        shoMatcher.getCandidateMatchesUsingSpatialSearch(range);
    }
    shoMatcher.extractFeatures(true);
    shoMatcher.runRobustFeatureMatching();
    //******End matching pipeline******
#if 1
    string image1 = "0058_SONY.jpg";
    string image2 = "0061_SONY.jpg";
#endif

#if 0
    string image1 = "resized_IMG_2889.jpg";
    string image2 = "resized_IMG_2891.jpg";
#endif
    //***Begin tracking pipeline *****
    ShoTracker tracker(flight, shoMatcher.getCandidateImages());
    vector<pair<ImageFeatureNode, ImageFeatureNode>> featureNodes;
    vector<FeatureProperty> featureProps;
    tracker.createFeatureNodes(featureNodes, featureProps);
    tracker.createTracks(featureNodes);
    auto tracksGraph = tracker.buildTracksGraph(featureProps);
    cout << "Created tracks graph " << endl;
    cout << "Number of vertices is " << tracksGraph.m_vertices.size() << endl;
    cout << "Number of edges is " << tracksGraph.m_edges.size() << endl;
    auto commonTracks = tracker.commonTracks(tracksGraph);
    Reconstructor reconstructor(flight, tracksGraph);
    reconstructor.runIncrementalReconstruction(tracker);
    cout << "Finished incremental runIncrementalReconstructionreconstruction \n\n";

#endif
}